#!/usr/bin/env python3
# This file is placed in the Public Domain.
#
# pylint: disable=C,I,R,E0611,I1101,W0401,W0614


"tinder tests"


__author__ = "Bart Thate <skullbonesandnumber@gmail.com>"


import os
import random
import shutil
import sys
import termios
import time
import traceback
import _thread


sys.path.insert(0, os.getcwd())


from sbn import Broker, Cfg, Command, Errors, Event, Logging, Persist, Reactor
from sbn import Object
from sbn import laps, keys, launch, parse, spl, update
from sbn import modules


DATE = time.ctime(time.time()).replace("  ", " ")
NAME = "tinder"
STARTTIME = time.time()


Cfg.debug = True
Cfg.silent = False
Cfg.skip = ["debug",]


Logging.raw = print
Persist.workdir = ".test"


paylock = _thread.allocate_lock()
outlock = _thread.allocate_lock()


errors = []
events = []


param = Object()
param.cfg = ["server=localhost", ""]
param.cmd = [""]
param.dlt = ["~bart@127.0.0.1"]
param.dne = ["test4", ""]
param.dpl = ["reddit title,summary,link", ""]
param.err = [""]
param.flt = ["", "0"]
param.rem = ["reddit", ""]
param.fnd = [
             'log',
             "cfg",
             "tdo",
             "rss",
             "tdo txt==test",
             "cfg server==localhost",
             "rss rss==reddit"
            ]
param.log = ["test1", ""]
param.mdl = [""]
param.met = ["~bart@127.0.0.1"]
param.mod = [""]
param.nme = ["reddit reddit"]
param.now = [""]
param.pwd = ["bla bla"]
param.rem = ["reddit"]
param.req = [""]
param.rld = ["bsc"]
param.rss = ["https://www.reddit.com/r/python/.rss"]
param.shp = ["bread", "butter", "cheese"]
param.tdo = ["test4", ""]
param.thr = [""]
param.tpc = [""]
param.unl = ["udp"]
param.wsd = [""]
param.wsh = [""]


def cprint(txt):
    print(txt)
    sys.stdout.flush()


class CLI(Reactor):

    def __init__(self):
        Reactor.__init__(self)
        Broker.add(self)
        self.register("event", Command.handle)

    def raw(self, txt):
        with outlock:
            if txt and "v" in Cfg.opts:
                cprint(txt.rstrip())


def consume(evts):
    fixed = []
    res = []
    for evt in evts:
        res.append(evt.wait())
        fixed.append(evt)
    for fff in fixed:
        try:
            evts.remove(fff)
        except ValueError:
            continue
    return res


def parse_cli(txt) -> Cfg:
    evt = Event()
    parse(evt, txt)
    if "v" in Cfg.opts:
        Logging.verbose = True
        Logging.raw = print
    update(Cfg, evt, False)
    Cfg.mod += evt.mods
    return Cfg


def scanstr(pkg, mods, init=None, doall=False, wait=False) -> None:
    res = []
    path = pkg.__path__[0]
    if doall:
        modlist = [x[:-3] for x in os.listdir(path) if x.endswith(".py") and x != "__init__.py"]
        mods = ",".join(sorted(modlist))
    threads = []
    for modname in spl(mods):
        module = getattr(modules, modname, None)
        print(modname, module)
        if module:
            Command.scan(module)
        if init and "start" in dir(module):
            threads.append(launch(module.start))
        res.append(module)
    if wait:
        for thread in threads:
            thread.join()
    return res


def payload(clt) -> None:
    cmds = list(keys(Command.cmds))
    random.shuffle(cmds)
    print(cmds)
    with paylock:
        nmr = 0
        for cmnd in cmds:
            for ex in getattr(param, cmnd, [""]):
                print(cmnd + " "  + ex)
                evt = clt.event(cmnd + " " + ex)
                clt.handle(evt)
                events.append(evt)
                nmr += 1
        return nmr


def waiter() -> None:
    got = []
    for ex in Errors.errors:
        if not Cfg.silent:
            traceback.print_exception(type(ex), ex, ex.__traceback__)
        got.append(ex)
    for exc in got:
        Errors.errors.remove(exc)


def wrap(func) -> None:
    old = termios.tcgetattr(sys.stdin.fileno())
    try:
        func()
    except (EOFError, KeyboardInterrupt):
        print("")
        sys.stdout.flush()
    finally:
        termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old)
        waiter()


def main() -> None:
    print(f"{NAME.upper()} started {DATE}")
    if os.path.exists(Persist.workdir):
        shutil.rmtree(Persist.workdir)
    parse_cli(" ".join(sys.argv[1:]))
    if "v" in Cfg.opts:
        Logging.verbose = True
        Logging.raw = cprint
    scanstr(modules, Cfg.mod, False, doall=True)
    nrs = Cfg.index or 1
    cli = CLI()
    cli.start()
    waiters = []
    for _nr in range(nrs):
        waiters.append(launch(payload, cli, name=_nr))
    result = 1
    for wtr in waiters:
        result += wtr.join() or 1
    consume(events)
    endtime = time.time()
    lap = laps(endtime - STARTTIME)
    percall = (endtime - STARTTIME)/result
    waiter()
    print(f"{lap} {result} {percall}")


wrap(main)
